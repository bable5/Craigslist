
R version 3.0.0 (2013-04-03) -- "Masked Marvel"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]


 Rrrr! The statistics program for Pirates !

> library(scrapeR)
Loading required package: XML
Loading required package: RCurl
Loading required package: bitops
> library(plyr)
> library(reshape2)
> 
> setwd("/home/susan/Documents/R Projects/Craigslist")
> url <- "http://www.craigslist.org/about/sites"
> 
> cities <- scrape(url)[[1]]
> regions <- getNodeSet(cities, '//*[@class="body"]/div[@class="colmask"]')
> region.name = sapply(getNodeSet(cities, '//*[@class="body"]/h1/a'), xmlAttrs, "name")
> regionList <- lapply(1:length(regions), function(i) getNodeSet(cities, path=paste('//*[@id="pagecontainer"]/section/div[@class="colmask"][', i, ']/div', sep="")))
> 
> getRegionInfo <- function(states, regions=regions, cities=cities){
+   df2 <- rbind.fill(lapply(states, function(j) {
+     m <- xmlChildren(j)
+     p <- as.character(sapply(m[which(names(m)%in%"h4")], xmlValue))
+     n <- lapply(m[which(names(m)%in%"ul")], xmlChildren)
+     if(length(n)==0) return(data.frame())
+     df <- lapply(n, function(o) as.data.frame(cbind(name = as.character(sapply(o[which(names(o)=="li")], xmlValue)), url = as.character(sapply(o[which(names(o)=="li")], function(k) xmlAttrs(xmlChildren(k)[[1]])))), stringsAsFactors=FALSE))
+     p <- rep(p, sapply(df, function(i) nrow(i)))
+     df <- rbind.fill(df, stringsAsFactors=FALSE)
+     df$state <- p
+     df
+   }))
+   
+   df2
+ }
> 
> craigslistURLs <- lapply(regionList, getRegionInfo)
> region.name <- rep(region.name, sapply(craigslistURLs, nrow))
> craigslistURLs <- rbind.fill(craigslistURLs)
> craigslistURLs$region <- region.name
> craigslistURLs$url[which(craigslistURLs$region=="CA")] <- gsub(".craigslist.ca", "en.craigslist.ca", craigslistURLs$url[which(craigslistURLs$region=="CA")])
> 
> # get link to post
> getpagelink <- function(i, city){try(
+   paste(city, as.character(xmlAttrs(getNodeSet(i, "a[@class='i']")[[1]]))[1], sep=""))
+ }
> # get class attr, value for page link
> getpagelinkclass <- function(kids){try(
+   t(data.frame(t(sapply(
+     which(names(kids)=="span"), 
+     function(j) unlist(c(xmlAttrs(kids[[j]]), 
+                          xmlValue(kids[[j]])))[1:2])), row.names=1))
+   )
+ }
> 
> # get reply email, if present
> getpostemail <- function(postinfo){try(
+   xmlValue(sapply(postinfo, getNodeSet, '//*[@id="pagecontainer"]/section/section[@class="dateReplyBar"]/div[@class="returnemail"]')[[1]]))
+ }
> 
> # get post date
> getpostdate <- function(postinfo){try(
+   as.character(lapply(sapply(postinfo, getNodeSet, 
+                '//*[@id="pagecontainer"]/section/section[@class="dateReplyBar"]/p[@class="postinginfo"]/date'), 
+                       xmlValue, FALSE, FALSE))
+ )
+ }
> 
> # get images
> getpostimages <- function(postinfo){try(
+   imgs <- sapply(postinfo, getNodeSet, '//*[@id="pagecontainer"]/section/section[@class="userbody"]/figure/div[@id="thumbs"]/a')
+   if(length(unlist(imgs))>0){
Error: unexpected 'if' in:
"  imgs <- sapply(postinfo, getNodeSet, '//*[@id="pagecontainer"]/section/section[@class="userbody"]/figure/div[@id="thumbs"]/a')
  if"
Execution halted
